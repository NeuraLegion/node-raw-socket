name: Automated deploy

on:
  release:
    types: [created]

env:
  VERSION: ${{ github.event.release.tag_name }}
  TARGET_REF: ${{ github.event.release.target_commitish }}

jobs:
  build_x86_64:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ macos-latest, ubuntu-latest, windows-2019 ]
        node: [ 14, 16 ]
    env:
      npm_config_msvs_version: 2019
      npm_config_python: python3.10
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ env.TARGET_REF }}
          token: ${{ secrets.GPR_TOKEN }}

      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}

      - name: Install dependencies
        run: npm ci --ignore-scripts

      - name: Prebuild package
        run: npx @mapbox/node-pre-gyp configure build package

      - name: Upload binaries to GitHub Release
        run: npx node-pre-gyp-github publish
        env:
          NODE_PRE_GYP_GITHUB_TOKEN: ${{ secrets.GPR_TOKEN }}
  build_x86_64_node_ge_18:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ macos-latest, ubuntu-latest, windows-2019 ]
        node: [18, 19, 20]
    env:
      npm_config_msvs_version: 2019
      npm_config_python: python3.10
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ env.TARGET_REF }}
          token: ${{ secrets.GPR_TOKEN }}

      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}

      - name: Install dependencies
        run: npm ci --ignore-scripts

      - name: Prebuild package
        run: npx @mapbox/node-pre-gyp configure build package

      - name: Upload binaries to GitHub Release
        run: npx node-pre-gyp-github publish
        env:
          NODE_PRE_GYP_GITHUB_TOKEN: ${{ secrets.GPR_TOKEN }}
  build_musl_x86_64:
    runs-on: ubuntu-latest
    container:
      image: node:${{ matrix.node }}-alpine
    strategy:
      fail-fast: false
      matrix:
        node: [ 14, 16, 18, 19, 20 ]
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ env.TARGET_REF }}
          token: ${{ secrets.GPR_TOKEN }}

      - name: Setup env with Node v${{ matrix.node }}
        run: |
          apk add --update
          apk add --no-cache ca-certificates git curl build-base python3 g++ make

      - name: Install dependencies
        run: npm ci --ignore-scripts

      - name: Prebuild package
        run: npx @mapbox/node-pre-gyp configure build package

      - name: Upload binaries to GitHub Release
        run: npx node-pre-gyp-github publish
        env:
          NODE_PRE_GYP_GITHUB_TOKEN: ${{ secrets.GPR_TOKEN }}
  build_aarch64:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node: [ 14, 16, 18, 19, 20 ]
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ env.TARGET_REF }}
          token: ${{ secrets.GPR_TOKEN }}

      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}

      - name: Package prebuild
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

      - name: Install dependencies
        run: npm ci --ignore-scripts

      - name: Prebuild package
        run: |
          CC=aarch64-linux-gnu-gcc \
          CXX=aarch64-linux-gnu-g++ \
          npx @mapbox/node-pre-gyp --target_arch=arm64 configure build package

      - name: Upload binaries to GitHub Release
        run: npx node-pre-gyp-github publish
        env:
          NODE_PRE_GYP_GITHUB_TOKEN: ${{ secrets.GPR_TOKEN }}
  build_musl_aarch64:
    runs-on: ubuntu-latest
    container:
      image: node:${{ matrix.node }}-alpine
    strategy:
      fail-fast: false
      matrix:
        node: [ 14, 16, 18, 19, 20 ]
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ env.TARGET_REF }}
          token: ${{ secrets.GPR_TOKEN }}

      - name: Setup env with Node v${{ matrix.node }}
        run: |
          apk add --update
          apk add --no-cache ca-certificates git curl build-base python3 g++ make

      - name: Setup musl cross compiler
        run: |
          curl -OL https://musl.cc/aarch64-linux-musl-cross.tgz
          tar -xzvf aarch64-linux-musl-cross.tgz
          $(pwd)/aarch64-linux-musl-cross/bin/aarch64-linux-musl-gcc --version

      - name: Install dependencies
        run: npm ci --ignore-scripts

      - name: Prebuild package
        run: |
          CC=$(pwd)/aarch64-linux-musl-cross/bin/aarch64-linux-musl-gcc \
          CXX=$(pwd)/aarch64-linux-musl-cross/bin/aarch64-linux-musl-g++ \
          npx @mapbox/node-pre-gyp --target_arch=arm64 configure build package

      - name: Upload binaries to GitHub Release
        run: npx node-pre-gyp-github publish
        env:
          NODE_PRE_GYP_GITHUB_TOKEN: ${{ secrets.GPR_TOKEN }}
  build_arm:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node: [ 14, 16, 18, 19, 20 ]
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ env.TARGET_REF }}
          token: ${{ secrets.GPR_TOKEN }}

      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}

      - name: Install ARM cross-compilation tools
        run: sudo apt-get install -y gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf

      - name: Install dependencies
        run: npm ci --ignore-scripts

      - name: Prebuild package
        run: |
          CC=arm-linux-gnueabihf-gcc \
          CXX=arm-linux-gnueabihf-g++ \
          npx @mapbox/node-pre-gyp --target_arch=arm configure build package

      - name: Upload binaries to GitHub Release
        run: npx node-pre-gyp-github publish
        env:
          NODE_PRE_GYP_GITHUB_TOKEN: ${{ secrets.GPR_TOKEN }}
  build_musl_arm:
    runs-on: ubuntu-latest
    container:
      image: node:${{ matrix.node }}-alpine
    strategy:
      fail-fast: false
      matrix:
        node: [ 14, 16, 18, 19, 20 ]
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ env.TARGET_REF }}
          token: ${{ secrets.GPR_TOKEN }}

      - name: Setup env with Node v${{ matrix.node }}
        run: |
          apk add --update
          apk add --no-cache ca-certificates git curl build-base python3 g++ make

      - name: Setup musl cross compiler
        run: |
          curl -OL https://musl.cc/arm-linux-musleabihf-cross.tgz  
          tar -xzvf arm-linux-musleabihf-cross.tgz  
          $(pwd)/arm-linux-musleabihf-cross/bin/arm-linux-musleabihf-gcc --version

      - name: Install dependencies
        run: npm ci --ignore-scripts

      - name: Prebuild package
        run: |
          CC=$(pwd)/arm-linux-musleabihf-cross/bin/arm-linux-musleabihf-gcc \
          CXX=$(pwd)/arm-linux-musleabihf-cross/bin/arm-linux-musleabihf-g++ \
          npx @mapbox/node-pre-gyp --target_arch=arm configure build package

      - name: Upload binaries to GitHub Release
        run: npx node-pre-gyp-github publish
        env:
          NODE_PRE_GYP_GITHUB_TOKEN: ${{ secrets.GPR_TOKEN }}
  deploy:
    needs:
      - build_x86_64
      - build_x86_64_node_ge_18
      - build_musl_x86_64
      - build_aarch64
      - build_musl_aarch64
      - build_arm
      - build_musl_arm
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ env.TARGET_REF }}
          token: ${{ secrets.GPR_TOKEN }}

      - uses: actions/setup-node@v3
        with:
          node-version: 18
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci --ignore-scripts

      - name: Publish to npm
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - uses: actions/setup-node@v3
        with:
          node-version: 18
          registry-url: 'https://npm.pkg.github.com'
          scope: '@NeuraLegion'

      - name: Publish to GPR
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GPR_TOKEN }}
